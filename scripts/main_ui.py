import streamlit as st
import os
import random  # ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
from PIL import Image
from pathlib import Path
from create_name_functional import rename_image_files  # ‚¨ÖÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô rename ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
from extract_features_functional import extract_features  # ‚¨ÖÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û
from generate_synthetic_functional import generate_synthetic_dataset  # ‚¨ÖÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
import io
import contextlib
import time

# === CONFIGURATION ===
RAW_IMAGE_DIR = r"C:\\Project\\raw_images"
BG_IMAGE_DIR = r"C:\\Project\\backgrounds"
FEATURE_DIR = r"C:\\Project\\features"
SYN_IMAGE_DIR = r"C:\\Project\\synthetic_dataset"
ANNOTATIONS_DIR = r"C:\\Project\\annotations"
VALID_EXT = (".jpg", ".jpeg", ".png")

os.makedirs(RAW_IMAGE_DIR, exist_ok=True)
os.makedirs(BG_IMAGE_DIR, exist_ok=True)
os.makedirs(FEATURE_DIR, exist_ok=True)
os.makedirs(SYN_IMAGE_DIR, exist_ok=True)
os.makedirs(ANNOTATIONS_DIR, exist_ok=True)

st.set_page_config(page_title="Synthetic Dataset Generator", layout="centered")
st.title("üß™ Synthetic Dataset Generator")

# === STEP 1: Upload Raw & Background Images ===
st.header("üì§ Step 1: Upload Images")

# Upload Raw Images
st.subheader("üñºÔ∏è Upload Raw Images")
raw_files = st.file_uploader("Upload .jpg or .png files", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="raw")
if raw_files:
    for file in raw_files:
        file_path = os.path.join(RAW_IMAGE_DIR, file.name)
        with open(file_path, "wb") as f:
            f.write(file.read())
    st.success(f"‚úÖ Uploaded {len(raw_files)} raw image(s) to {RAW_IMAGE_DIR}")

if st.button("üîç ‡∏î‡∏π‡∏†‡∏≤‡∏û‡πÉ‡∏ô raw_images"):
    image_files = [f for f in os.listdir(RAW_IMAGE_DIR) if f.lower().endswith(VALID_EXT)]
    if image_files:
        st.text(f"‡∏û‡∏ö {len(image_files)} ‡∏£‡∏π‡∏õ‡πÉ‡∏ô raw_images")
        cols = st.columns(5)
        for i, img_name in enumerate(image_files):
            img_path = os.path.join(RAW_IMAGE_DIR, img_name)
            with cols[i % 5]:
                st.image(img_path, caption=img_name, use_container_width=True)
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô raw_images")

if st.button("üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå raw_images ‡πÉ‡∏ô Windows"):
    os.startfile(RAW_IMAGE_DIR)

# Upload Background Images
st.subheader("üñºÔ∏è Upload Background Images")
bg_files = st.file_uploader("Upload .jpg or .png files", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="bg")
if bg_files:
    for file in bg_files:
        file_path = os.path.join(BG_IMAGE_DIR, file.name)
        with open(file_path, "wb") as f:
            f.write(file.read())
    st.success(f"‚úÖ Uploaded {len(bg_files)} background image(s) to {BG_IMAGE_DIR}")

if st.button("üîç ‡∏î‡∏π‡∏†‡∏≤‡∏û‡πÉ‡∏ô backgrounds"):
    image_files = [f for f in os.listdir(BG_IMAGE_DIR) if f.lower().endswith(VALID_EXT)]
    if image_files:
        st.text(f"‡∏û‡∏ö {len(image_files)} ‡∏£‡∏π‡∏õ‡πÉ‡∏ô backgrounds")
        cols = st.columns(5)
        for i, img_name in enumerate(image_files):
            img_path = os.path.join(BG_IMAGE_DIR, img_name)
            with cols[i % 5]:
                st.image(img_path, caption=img_name, use_container_width=True)
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô backgrounds")

if st.button("üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå backgrounds ‡πÉ‡∏ô Windows"):
    os.startfile(BG_IMAGE_DIR)

# === STEP 2: Rename Files ===
st.header("‚úèÔ∏è Step 2: Rename Files")

col1, col2 = st.columns(2)
with col1:
    if st.button("‚öôÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Raw Images"):
        log_output = io.StringIO()
        with contextlib.redirect_stdout(log_output):
            rename_image_files(RAW_IMAGE_DIR, prefix="raw_images")
        st.success("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Raw Images ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        st.text_area("üìÑ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (raw_images)", value=log_output.getvalue(), height=200)
    if st.button("üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå raw_images ‡∏´‡∏•‡∏±‡∏á rename"):
        os.startfile(RAW_IMAGE_DIR)

with col2:
    if st.button("‚öôÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Backgrounds"):
        log_output = io.StringIO()
        with contextlib.redirect_stdout(log_output):
            rename_image_files(BG_IMAGE_DIR, prefix="background")
        st.success("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Backgrounds ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        st.text_area("üìÑ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (backgrounds)", value=log_output.getvalue(), height=200)
    if st.button("üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå backgrounds ‡∏´‡∏•‡∏±‡∏á rename"):
        os.startfile(BG_IMAGE_DIR)

# === STEP 3: Extract Features ===
st.header("‚úÇÔ∏è Step 3: Extract Features (Remove Background)")

if "log_lines" not in st.session_state:
    st.session_state["log_lines"] = ""

status_placeholder = st.empty()
log_placeholder = st.empty()

def stream_log(msg):
    st.session_state["log_lines"] += msg
    log_placeholder.text_area("üìÑ Log ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå (‡∏™‡∏î)", value=st.session_state["log_lines"], height=300)

if st.button("‚öôÔ∏è ‡πÅ‡∏¢‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å raw_images ‚Üí features"):
    st.session_state["log_lines"] = ""
    with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
        extract_features(
            input_folder=RAW_IMAGE_DIR,
            output_folder=FEATURE_DIR,
            log_callback=stream_log
        )
    status_placeholder.success("‚úÖ ‡∏î‡∏∂‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

if st.button("üñºÔ∏è ‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏ô features"):
    feature_files = [f for f in os.listdir(FEATURE_DIR) if f.lower().endswith(".png")]
    if feature_files:
        st.text(f"‡∏û‡∏ö {len(feature_files)} ‡∏£‡∏π‡∏õ‡πÉ‡∏ô features")
        cols = st.columns(5)
        for i, img_name in enumerate(feature_files):
            img_path = os.path.join(FEATURE_DIR, img_name)
            with cols[i % 5]:
                st.image(img_path, caption=img_name, use_container_width=True)
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô features")

if st.button("üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå features ‡πÉ‡∏ô Windows"):
    os.startfile(FEATURE_DIR)

# === STEP 4: Generate Synthetic Dataset ===
st.header("üß† Step 4: Generate Synthetic Dataset")

num_images = st.number_input("üìå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á", min_value=1, max_value=1000, value=200, step=1)
fixed_image_size = "640x640"
st.markdown(f"<span style='color: gray;'>üìê ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û: {fixed_image_size} (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ)</span>", unsafe_allow_html=True)

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏™‡∏î‡∏á log
syn_log_placeholder = st.empty()
st.session_state.setdefault("syn_log", "")

def log_syn(msg):
    st.session_state["syn_log"] += msg
    syn_log_placeholder.text_area("üìÑ Log ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Synthetic Dataset", value=st.session_state["syn_log"], height=300)

if st.button("‚öôÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Synthetic Dataset"):
    st.session_state["syn_log"] = ""
    width, height = map(int, fixed_image_size.split("x"))
    with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
        generate_synthetic_dataset(
            features_path=FEATURE_DIR,
            backgrounds_path=BG_IMAGE_DIR,
            output_path=SYN_IMAGE_DIR,
            annotations_path=ANNOTATIONS_DIR,
            num_images=num_images,
            log_callback=log_syn
        )
    st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß {num_images} ‡∏†‡∏≤‡∏û")

if st.button("üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå synthetic_dataset"):
    os.startfile(SYN_IMAGE_DIR)

if st.button("üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå annotations"):
    os.startfile(ANNOTATIONS_DIR)

if st.button("üñºÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß"):
    image_files = [f for f in os.listdir(SYN_IMAGE_DIR) if f.lower().endswith(VALID_EXT)]
    if image_files:
        sample_images = random.sample(image_files, min(3, len(image_files)))
        st.text(f"üîé ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û {len(sample_images)} ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å synthetic_dataset")
        cols = st.columns(3)
        for i, img_name in enumerate(sample_images):
            img_path = os.path.join(SYN_IMAGE_DIR, img_name)
            with cols[i % 3]:
                st.image(img_path, caption=img_name, use_container_width=True)
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏ô synthetic_dataset")
