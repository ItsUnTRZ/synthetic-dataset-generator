import os
from rembg import remove  # ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• ONNX
from PIL import Image, ImageFilter  # ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞ post-process ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

def post_process_image(image_path):
    """
    ‡∏ó‡∏≥ Post-processing ‡πÄ‡∏ä‡πà‡∏ô blur ‡πÅ‡∏•‡∏∞ sharpen ‡∏ö‡∏ô‡∏†‡∏≤‡∏û ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡∏î‡∏π‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•‡∏Ç‡∏∂‡πâ‡∏ô
    ‡πÉ‡∏ä‡πâ GaussianBlur ‡πÅ‡∏•‡∏∞ SHARPEN ‡∏à‡∏≤‡∏Å PIL
    """
    image = Image.open(image_path).convert("RGBA")  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGBA
    image = image.filter(ImageFilter.GaussianBlur(radius=2))  # ‡πÄ‡∏ö‡∏•‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    image = image.filter(ImageFilter.SHARPEN)  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    return image

def extract_features(input_folder, output_folder, prefix="feature", log_callback=None):
    """
    ‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å raw images ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û feature ‡∏ó‡∏µ‡πà post-processed ‡πÅ‡∏•‡πâ‡∏ß
    ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô feature_001.png, feature_002.png, ...

    Parameters:
    - input_folder (str): ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö .jpg
    - output_folder (str): ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ post-process
    - prefix (str): ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    - log_callback (function, optional): ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° log ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ Streamlit
      ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ print() ‡πÅ‡∏™‡∏î‡∏á log ‡πÅ‡∏ó‡∏ô
    """
    def log(msg):
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ log ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ print ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ UI
        if log_callback:
            log_callback(msg + "\n")
        else:
            print(msg)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå output ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    count = 1  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    for filename in sorted(os.listdir(input_folder)):
        if filename.lower().endswith(".jpg"):  # ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå .jpg
            input_path = os.path.join(input_folder, filename)
            output_filename = f"{prefix}_{count:03d}.png"  # ‡πÄ‡∏ä‡πà‡∏ô feature_001.png
            output_path = os.path.join(output_folder, output_filename)
            temp_output_path = os.path.join(output_folder, f"temp_{output_filename}")

            try:
                # üîç ‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ rembg
                with open(input_path, "rb") as input_file:
                    input_data = input_file.read()
                    output_data = remove(
                        input_data,
                        alpha_matting=True,
                        alpha_matting_foreground_threshold=240,
                    )

                # üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß
                with open(temp_output_path, "wb") as temp_output_file:
                    temp_output_file.write(output_data)

                # ‚ú® ‡∏ó‡∏≥ post-processing ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                processed_image = post_process_image(temp_output_path)
                processed_image.save(output_path)

                # üîÑ ‡∏•‡∏ö‡∏†‡∏≤‡∏û‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏≠‡∏≠‡∏Å
                os.remove(temp_output_path)

                # ‚úÖ log ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                log(f"‚úÖ Processed: {filename} ‚Üí {output_filename}")
                count += 1

            except Exception as e:
                # ‚ùå log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                log(f"‚ùå Error processing {filename}: {e}")

# ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô python extract_features_functional.py)
if __name__ == "__main__":
    extract_features(
        input_folder=r"C:\\Project\\raw_images",
        output_folder=r"C:\\Project\\features"
    )
